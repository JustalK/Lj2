openapi: 3.0.0
info:
  description: The PORTFOLIO API define the functionnalities of my single page application for showing my profesionnal work to the world. Under you will find the specification of my restful API, the description of the models, informations about the context and the idea behind tricky part of the implementation.
  version: 1.0.0
  title: PORTFOLIO API
  contact:
    name: API Support for PORFOLIO
    email: justal.kevin@gmail.com
servers:
  - url: http://localhost:8080
    description: Local server
tags:
  - name: Articles
    description: API Endpoints for the articles and projects
  - name: Images
    description: API Endpoints for the images for the images
  - name: Tags
    description: API Endpoints for the tags
  - name: Contacts
    description: API Endpoints for the contacts informations
  - name: Pages
    description: API Endpoints for the pages informations
#/** =============================================================================>
#===========================> API ARTICLES
#=============================================================================> **/
paths:
  /api/articles:
    get:
      tags:
      - Articles
      summary: Get the articles by page
      description: ''
      operationId: articles
      parameters:
        - in: query
          name: tags
          schema:
            type: array
            items:
              "$ref": "#/components/schemas/tags"
          description: The tags for filtering the document
        - in: query
          name: page
          schema:
            type: integer
          description: The page of the articles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datas:
                    type: array
                    items:
                       "$ref": "#/components/schemas/articles"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Server error
#/** =============================================================================>
#===========================> API TAGS
#=============================================================================> **/
  /api/tags:
    get:
      tags:
      - Tags
      summary: Get all the tags
      description: ''
      operationId: tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  datas:
                    type: array
                    items:
                       "$ref": "#/components/schemas/tags"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Server error
#/** =============================================================================>
#===========================> API CONTACTS
#=============================================================================> **/
  /api/contacts/my-identity:
    get:
      tags:
      - Contacts
      summary: Get my contact information
      description: ''
      operationId: contacts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/contacts"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Server error
#/** =============================================================================>
#===========================> API PAGES
#=============================================================================> **/
  /api/pages:
    get:
      tags:
      - Pages
      summary: Get my contact information
      description: ''
      operationId: pages
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: The name of the page
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                "$ref": "#/components/schemas/pages"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Server error
#/** =============================================================================>
#===========================> MODEL
#=============================================================================> **/
components:
  schemas:
    articles:
      type: object
      required:
        - title
        - slug
        - short_description
        - tags
      properties:
        _id:
          type: uuid
        title:
          type: string
          description: The title of the article
        slug:
          type: string
          description: The slug for the url
        short_description:
          type: string
          description: The description for the portfolio's page
        long_description:
          type: string
          description: The description for the project's page
        tags:
          type: array
          items:
            type: uuid
          description: The tags of the article
        images:
          type: array
          items:
            type: uuid
          description: The images of the article
        created_at:
          type: date
          description: The date of creation
          example: '20/10/2018 10:00:12'
          readOnly: true
        updated_at:
          type: date
          description: The date of the last update
          example: '20/10/2018 10:00:12'
          readOnly: true
        __v:
          type: number
          description: Number of update made since the creation
          default: 0
          example: 12
          readOnly: true
    images:
      type: object
      required:
        - name
        - path
      properties:
        _id:
          type: uuid
        name:
          type: string
          description: The name of the image
        path:
          type: string
          description: The path of the image
        created_at:
          type: date
          description: The date of creation
          example: '20/10/2018 10:00:12'
          readOnly: true
        updated_at:
          type: date
          description: The date of the last update
          example: '20/10/2018 10:00:12'
          readOnly: true
        __v:
          type: number
          description: Number of update made since the creation
          default: 0
          example: 12
          readOnly: true
    tags:
      type: object
      required:
        - name
      properties:
        _id:
          type: uuid
        name:
          type: string
          description: The name of the tag
        created_at:
          type: date
          description: The date of creation
          example: '20/10/2018 10:00:12'
          readOnly: true
        updated_at:
          type: date
          description: The date of the last update
          example: '20/10/2018 10:00:12'
          readOnly: true
        __v:
          type: number
          description: Number of update made since the creation
          default: 0
          example: 12
          readOnly: true
    contacts:
      type: object
      required:
        - firstname
        - lastname
        - email
      properties:
        _id:
          type: uuid
        firstname:
          type: string
          description: The firstname of the contact
        lastname:
          type: string
          description: The lastname of the contact
        fullname:
          type: string
          description: The fullname of the contact (virtual)
        email:
          type: string
          description: The email of the contact
        created_at:
          type: date
          description: The date of creation
          example: '20/10/2018 10:00:12'
          readOnly: true
        updated_at:
          type: date
          description: The date of the last update
          example: '20/10/2018 10:00:12'
          readOnly: true
        __v:
          type: number
          description: Number of update made since the creation
          default: 0
          example: 12
          readOnly: true
    pages:
      type: object
      required:
        - name
        - title
        - description
      properties:
        _id:
          type: uuid
        name:
          type: string
          description: The name of the page
        title:
          type: string
          description: The title of the page
        description:
          type: string
          description: The description of the page
        created_at:
          type: date
          description: The date of creation
          example: '20/10/2018 10:00:12'
          readOnly: true
        updated_at:
          type: date
          description: The date of the last update
          example: '20/10/2018 10:00:12'
          readOnly: true
        __v:
          type: number
          description: Number of update made since the creation
          default: 0
          example: 12
          readOnly: true
